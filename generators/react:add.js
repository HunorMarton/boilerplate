// This is a code generator file was generated by https://github.com/HunorMarton/boilerplate
// To create a component run `node add c componenet-name component-prop-1 component-prop-2 component-prop-3`
// To create a redux duck run `node add d duck-name duck-action-1 duck-action-2 duck-action-3`

const fs = require("fs");
const execSync = require("child_process").execSync;

const [, , type, name, ...args] = process.argv;

if (!type)
  throw Error(
    "You should provide an argument regarding what would you like to add, type 'c' for component"
  );

if (!name) throw Error("You should provide a second argument with the name");

switch (type) {
  /*************************************/
  /* COMPONENT                         */
  /*************************************/
  case "c": {
    const capitalizedName = name.charAt(0).toUpperCase() + name.slice(1);
    const dashedName = name.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase();

    const hasStorybook = fs.existsSync(".storybook");

    const component = `import * as React from 'react';
import './${capitalizedName}.css';

type Props = {
  ${args.map(arg => `${arg}: `).join("\n  ")}
};

const ${capitalizedName}: React.FC<Props> = props => {
  const { ${args.map(arg => `${arg}`).join(", ")} } = props;

  return (
    <div className="${dashedName}">

    </div>
  );
};

export default ${capitalizedName};`;

    fs.writeFileSync(`./components/${capitalizedName}.tsx`, component);

    const style = `.${dashedName} {

}`;

    fs.writeFileSync(`./components/${capitalizedName}.css`, style);

    if (hasStorybook) {
      const storybook = `import * as React from 'react';
import { storiesOf } from '@storybook/react';
import ${capitalizedName} from './${capitalizedName}';
import '../index.css';

const stories = storiesOf('${capitalizedName}', module);

stories.add('default', () => (
  <${capitalizedName}
    ${args.map(arg => `${arg}=""`).join("\n    ")}
  />
));`;

      fs.writeFileSync(
        `./components/${capitalizedName}.stories.tsx`,
        storybook
      );
    }
    break;
  }

  /*************************************/
  /* REDUX DUCK                        */
  /*************************************/
  case "d": {
    fs.mkdirSync(`./ducks/${name}`);

    const underscoreUppercaseName = name =>
      name.replace(/([a-z])([A-Z])/g, "$1_$2").toUpperCase();

    const actions = `import { action } from 'typesafe-actions';

${args
  .map(
    arg =>
      `export const ${underscoreUppercaseName(
        arg
      )} = '@${name.toUpperCase()}/${underscoreUppercaseName(arg)}';`
  )
  .join("\n")}

${args
  .map(
    arg =>
      `export const ${arg} = () => action(${underscoreUppercaseName(arg)}, {});`
  )
  .join("\n")}
`;

    fs.writeFileSync(`./ducks/${name}/actions.ts`, actions);

    const reducer = `import Action from '../Action';
import * as actions from './actions';

interface State {

}

const initialState: State = {

};

export default function reducer(state: State = initialState, action: Action): State {
  switch (action.type) {
    ${args
      .map(
        arg => `case actions.${underscoreUppercaseName(arg)}:
      return {
        ...state,
      };`
      )
      .join("\n    ")}
    default:
      return state;
  }
}
`;

    fs.writeFileSync(`./ducks/${name}/reducer.ts`, reducer);

    // TODO: Update rootReducer and Action
  }
}

console.log("Done");
